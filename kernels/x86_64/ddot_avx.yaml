---
- Name: ddot_avx
- Description: Double-precision dot product of two vectors, optimized for AVX
- RequireWorkGroup: true
- FeatureFlag:
  - avx
- Parameters:
  - N:
      description: 'Size of array that should be loaded, Possible Values: kB, MB,
        GB'
      options:
      - bytes
      - required
- Streams:
  - STR0:
      datatype: double
      dimension: 1
      dimsizes:
      - N
  - STR1:
      datatype: double
      dimension: 1
      dimsizes:
      - N
- Variables:
    BYTES_PER_ELEM: 8
    BYTES_PER_ITER: 256
    FLOPS_PER_ITER: 32
    LOADS_PER_ITER: 32
    INST_PER_ITER: 12
    UPOS_PER_ITER: 16
    UNROLL_FACTOR: 16
- Metrics:
    Flops [MFLOPS/s]: FLOPS_PER_ITER * ITER / TIME
    Load bandwidth [MBytes/s]: LOADS_PER_ITER * BYTES_PER_ELEM * ITER / TIME
    Total bandwidth [MBytes/s]: BYTES_PER_ITER * ITER / TIME
    Total uops: UPOS_PER_ITER * ITER
    Total instructions: INST_PER_ITER * ITER
- Theads:
    offsets: Thread_ID * N / NUM_THREADS
    sizes: N / NUM_THREADS
- Language: asm
...
LOOP(loop, rax=0, <, rdi=N, 16)
vmovaps ymm1,       [STR0 + rax * 8]
vmulpd  ymm1, ymm1, [STR1 + rax * 8]
vaddpd  ymm0, ymm0, ymm1
vmovaps ymm2,       [STR0 + rax * 8 + 32]
vmulpd  ymm2, ymm2, [STR1 + rax * 8 + 32]
vaddpd  ymm5, ymm5, ymm2
vmovaps ymm3,       [STR0 + rax * 8 + 64]
vmulpd  ymm3, ymm3, [STR1 + rax * 8 + 64]
vaddpd  ymm6, ymm6, ymm3
vmovaps ymm4,       [STR0 + rax * 8 + 96]
vmulpd  ymm4, ymm4, [STR1 + rax * 8 + 96]
vaddpd  ymm7, ymm7, ymm4
LOOPEND(loop)
# ptt for comparision [Will be removed soon]
STREAMS 2
TYPE DOUBLE
FLOPS 2
BYTES 16
DESC Double-precision dot product of two vectors, optimized for AVX
LOADS 2
STORES 0
INSTR_CONST 20
INSTR_LOOP 15
UOPS 18
vxorpd ymm0, ymm0, ymm0
vxorpd ymm5, ymm5, ymm5
vxorpd ymm6, ymm6, ymm6
vxorpd ymm7, ymm7, ymm7
LOOP 16
vmovaps ymm1,       [STR0 + GPR1 * 8]
vmulpd  ymm1, ymm1, [STR1 + GPR1 * 8]
vaddpd  ymm0, ymm0, ymm1
vmovaps ymm2,       [STR0 + GPR1 * 8 + 32]
vmulpd  ymm2, ymm2, [STR1 + GPR1 * 8 + 32]
vaddpd  ymm5, ymm5, ymm2
vmovaps ymm3,       [STR0 + GPR1 * 8 + 64]
vmulpd  ymm3, ymm3, [STR1 + GPR1 * 8 + 64]
vaddpd  ymm6, ymm6, ymm3
vmovaps ymm4,       [STR0 + GPR1 * 8 + 96]
vmulpd  ymm4, ymm4, [STR1 + GPR1 * 8 + 96]
vaddpd  ymm7, ymm7, ymm4
