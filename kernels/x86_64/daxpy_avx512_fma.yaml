---
- Name: daxpy_avx512_fma
- Description: Double-precision linear combination of two vectors y[i] = a * x[i] + y[i], optimized for AVX-512 FMAs
- RequireWorkgroup: true
- FeatureFlag:
    - avx512f
    - sse2
- Parameters:
  - N:
      description: Size of array that should be copied, Possible Values -  B, KB, MB, GB, TB, KiB, MiB, GiB, TiB
      options:
        - bytes
        - required
- Streams:
  - STR0:
      dimensions: 1
      datatype: double
      initialization: rand
      dimsizes:
        - N
      options:
        - perthread
      offsets:
        - THREAD_ID*(N/NUM_THREADS)
      sizes:
        - N/NUM_THREADS
  - STR1:
      dimensions: 1
      datatype: double
      dimsizes:
        - N
      options:
        - perthread
      offsets:
        - THREAD_ID*(N/NUM_THREADS)
      sizes:
        - N/NUM_THREADS
- Variables:
  LOADS_PER_ELEM: 2
  STORES_PER_ELEM: 1
  MEM_OPS_PER_ELEM: 3
  LOADS_PER_ITER: 64
  STORES_PER_ITER: 32
  ELEMS_PER_ITER: 32
  BYTES_PER_ITER: 768
  INST_PER_ITER: 12
  INST_LOOP: 15
  UOPS_PER_ITER: 16
  UOPS_LOOP: 18
  FLOPS_PER_ITER: 2
- Metrics:
  Read bandwidth [MByte/s]: (1.0E-06*ITER*(N/NUM_THREADS)*LOADS_PER_ELEM)/time
  Store bandwidth [MByte/s]: (1.0E-06*ITER*(N/NUM_THREADS)*STORES_PER_ELEM)/time
  Total bandwidth [MByte/s]: (1.0E-06*ITER*(N/NUM_THREADS)*(MEM_OPS_PER_ELEM))/time
  Total flops [MFlops/s]: (1.0E-06*ITER*((N/SIZEOF_DOUBLE)/NUM_THREADS)*(FLOPS_PER_ITER))/time
  Total instructions: ITER*(((N/NUM_THREADS)/SIZEOF_DOUBLE)/ELEMS_PER_ITER)*INST_LOOP
  Total uops: ITER*(((N/NUM_THREADS)/SIZEOF_DOUBLE)/ELEMS_PER_ITER)*UOPS_LOOP
- Language: asm
...
vmovapd     zmm4, [rip + SCALAR] 
LOOP(loop, rax=0, <, rdi=N, 32)
vmovapd     zmm0, [STR0 + rax * 8]
vmovapd     zmm1, [STR0 + rax * 8 + 64]
vmovapd     zmm2, [STR0 + rax * 8 + 128]
vmovapd     zmm3, [STR0 + rax * 8 + 192]
vfmadd213pd zmm0, zmm4, [STR1 + rax * 8]
vfmadd213pd zmm1, zmm4, [STR1 + rax * 8 + 64]
vfmadd213pd zmm2, zmm4, [STR1 + rax * 8 + 128]
vfmadd213pd zmm3, zmm4, [STR1 + rax * 8 + 192]
vmovapd     [STR1 + rax * 8]        , zmm0
vmovapd     [STR1 + rax * 8 + 64]   , zmm1
vmovapd     [STR1 + rax * 8 + 128]  , zmm2
vmovapd     [STR1 + rax * 8 + 192]  , zmm3
LOOPEND(loop)
